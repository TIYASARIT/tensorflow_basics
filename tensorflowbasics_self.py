# -*- coding: utf-8 -*-
"""Tensorflowbasics_self.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YezHw_tTQjIUsG5q2a9GakGme2c1cDba
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import tensorflow as tf
print('Finished Import!')

"""Lets print **Welcome Tiyasa in the world of Tensorflow ** using Tensorflow program"""

# Define a placeholder (tensor), as tf.constant
x = tf.constant('Welcome Tiyasa in the world of Tensorflow')
# Define a tf session
sess = tf.Session()
# Run the x tensor under the session
print(x)
print(sess.run(x))

print(tf.__version__)

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

"""Define a constant"""

ex_tensor = tf.constant(3)
print(ex_tensor)
print(tf.shape(ex_tensor))
print(tf.rank(ex_tensor))

"""Define a rank 1 tensor

"""

ex_tensor = tf.constant([1.0, 2.0,3.0])
print(ex_tensor)
print(tf.shape(ex_tensor))
print(tf.rank(ex_tensor))

"""Define a rank 3 Tensor"""

ex_tensor = tf.constant([[[4, 5],[6,7]],[[12,13],[14,15]],[[17,18],[19,20]]])
print(ex_tensor)
print(tf.shape(ex_tensor))
print(tf.rank(ex_tensor))

"""SWITCH GEARS!!"""

a = tf.constant([3,4])
b=tf.constant([3,4])
c=a+b
print(a)
print(b)
print(c)

s=tf.Session()
print(s.run(a))
print(s.run(b))
print(s.run(c))

"""**Session:**  To evaluate tensors, instantiate a `tf.Session` object, informally known as **session**. A session encapsulates the state of tensorflow runtime and runs Tensorflow operations. It `tf.graph` is a `.py` file `tf.session` is like an executable.

**Placeholders** 
A graph can be parameterized to accept extenal inputs known as placeholders. A placeholder is a promise to provide  a value later, like a function argument.
"""

# Build a graph 
x = tf.placeholder(tf.float32)
y = tf.placeholder(tf.float32)
z = x+y
# Define session for executing the graph
# feed_dict argument of the run method to feed concrete values
print(z)
print(sess.run(z, feed_dict ={x:3,y:4.5}))
print(sess.run(z, feed_dict ={x:[4,3],y:[2,4.5]}))

"""We will use Keras to import data"""

(x_train, y_train),(x_test, y_test) = tf.contrib.keras.datasets.mnist.load_data(path = 'mnist.nzp')
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

y_train = y_train.astype('int32')
y_test = y_test.astype('int32')

# Normalize the color values to 0 and 1
# as imported they are 0-255

x_train /= 255
x_test /= 255

print(x_train.shape[0],'train_samples')
print(x_test.shape[0],'test_samples')

"""Here's our input function. By setting `num_epochs` to `none`, we will look over the data indefinitely as long as we like
The default batch size is `128` but you can provide parameter as you like

"""

train_input = tf.estimator.inputs.numpy_input_fn(
    {'x' : x_train},
    y_train,
    num_epochs = None,
    shuffle = True
)

test_input = tf.estimator.inputs.numpy_input_fn( 
    {'x' : x_test},
    y_test,
    num_epochs = 1,
    shuffle = False
)

feature_spec = [tf.feature_column.numeric_column('x', shape = 784)]

!mkdir new_folder

estimator1 = tf.estimator.LinearClassifier(feature_spec,
                                          n_classes = 10
                                          )

estimator1.train(train_input, steps=1000)

# We should see above 90% of accuracy here

evaluation = estimator1.evaluate(input_fn=test_input)
print(evaluation)

tf.summary.scalar

"""Here is how you print individual accuracy

"""

MAX_TO_PRINT = 5 
predictions =estimator1.predict(input_fn=test_input)
i=0
for p in predictions:
  true_label = y_test[i]
  predicted_label = p['class_ids'][0]
  print("Example %d . True %d , Predicted %d"  % (i, true_label, predicted_label))
  i=+1
  if i == MAX_TO_PRINT: break

tensorboard --logdir = tmp/tmpkstttlex

!ls
from google.colab import drive
drive.mount('/content/drive')

!git pull https://github.com/TIYASARIT/tensorflow_basics.git